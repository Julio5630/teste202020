package sistemaBiblioteca;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */


/**
 *
 * @author marci
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class Emprestimo extends javax.swing.JPanel {

    /**
     * Creates new form Principal
     */
    public Emprestimo() {
        initComponents();
}
  // O método initComponents já está sendo gerado automaticamente e não precisa ser reescrito aqui


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtNomeLivroEmprestimo = new javax.swing.JTextField();
        txtCPFEmprestimo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtDataLocacaoEmprestimo = new javax.swing.JTextField();
        txtPrazoDevolucaoEmprestimo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtDataDevolucaoEmprestimo = new javax.swing.JTextField();
        txtQuantidadeLocacaoEmprestimo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        btnConfirmarLocação = new javax.swing.JButton();
        btnListarInformacoes = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbEmprestimo = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtISBNEmprestimo = new javax.swing.JTextField();
        txtNomeClienteEmprestimo = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Cadastro de Cliente");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Dados")));

        jLabel4.setText("ISBN");

        txtNomeLivroEmprestimo.setEditable(false);
        txtNomeLivroEmprestimo.setEnabled(false);

        jLabel10.setText("CPF Cliente");

        jLabel11.setText("Data de Locação:");

        jLabel12.setText("Prazo de Devolução:");

        jLabel13.setText("Data de Devolução:");

        jLabel14.setText("Quantidade:");

        btnConfirmarLocação.setText("Confirmar Locação");
        btnConfirmarLocação.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarLocaçãoActionPerformed(evt);
            }
        });

        btnListarInformacoes.setText("Listar");
        btnListarInformacoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarInformacoesActionPerformed(evt);
            }
        });

        tbEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nome do Funcionario", "ISBN", "Nome do Cliente", "Data Locação", "Prazo Devolução", "Data Devolução", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tbEmprestimo);

        jLabel5.setText("Nome do Livro");

        jLabel15.setText("Nome do Cliente");

        txtNomeClienteEmprestimo.setEditable(false);
        txtNomeClienteEmprestimo.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataLocacaoEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrazoDevolucaoEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCPFEmprestimo, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                    .addComponent(txtISBNEmprestimo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNomeLivroEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNomeClienteEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDataDevolucaoEmprestimo, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(txtQuantidadeLocacaoEmprestimo)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnConfirmarLocação)
                            .addComponent(btnListarInformacoes)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNomeLivroEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtISBNEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCPFEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)
                        .addComponent(txtNomeClienteEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDataLocacaoEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrazoDevolucaoEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13)
                    .addComponent(txtDataDevolucaoEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(txtQuantidadeLocacaoEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnConfirmarLocação)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnListarInformacoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(1030, 1030, 1030))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
private String buscarNomeLivroPorISBN(String isbn) {
    String nomeLivro = "";  // Inicializa com uma string vazia
    Connection con = Conexao.conexaoBanco();  // Obtém a conexão

    if (con != null) {  // Verifica se a conexão foi bem-sucedida
        try (PreparedStatement stmt = con.prepareStatement("SELECT nome FROM livro WHERE isbn = ?")) {
            stmt.setString(1, isbn);  // Define o ISBN como parâmetro
            try (ResultSet rs = stmt.executeQuery()) {  // Executa a consulta
                if (rs.next()) {
                    nomeLivro = rs.getString("nome");  // Armazena o nome do livro
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();  // Exibe o erro caso ocorra uma exceção SQL
        } finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();  // Fecha a conexão
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        System.out.println("Erro: Conexão com o banco falhou.");
    }

    return nomeLivro;  // Retorna o nome do livro, ou uma string vazia se não encontrado
}

    
    private String buscarNomeClientePorCPF(String cpf) {
    String nomeCliente = "";  // Inicializa com uma string vazia
    Connection con = Conexao.conexaoBanco();  // Obtém a conexão usando o método static

    if (con != null) {  // Verifica se a conexão foi bem-sucedida
        try (PreparedStatement stmt = con.prepareStatement("SELECT nome FROM cliente WHERE cpf = ?")) {
            stmt.setString(1, cpf);  // Define o CPF como parâmetro
            try (ResultSet rs = stmt.executeQuery()) {  // Executa a consulta
                if (rs.next()) {
                    nomeCliente = rs.getString("nome");  // Armazena o nome do cliente
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();  // Exibe o erro se ocorrer uma exceção SQL
        } finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();  // Fecha a conexão
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    } else {
        System.out.println("Erro: Conexão com o banco falhou.");
    }

    return nomeCliente;  // Retorna o nome do cliente, ou uma string vazia se não encontrado
}


private void listarLocacoes() {
    // Aqui você pode listar as locações na tabela de empréstimos
    // A consulta SQL pode buscar todas as locações e preencher a JTable com os dados
    Connection con = Conexao.conexaoBanco();
    
    if (con != null) {
        String query = "SELECT id_locacao, id_cliente, id_livro, data_locacao, prazo_devolucao, quantidade FROM locacao";
        try (PreparedStatement stmt = con.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {
            // Preenchendo a tabela de empréstimos com as locações encontradas
            DefaultTableModel model = (DefaultTableModel) tbEmprestimo.getModel();  // Supondo que sua tabela seja tblEmprestimos
            model.setRowCount(0);  // Limpa a tabela antes de adicionar novos dados
            while (rs.next()) {
                // Adiciona cada locação na tabela
                model.addRow(new Object[]{
                    rs.getInt("id_locacao"),
                    rs.getInt("id_cliente"),
                    rs.getInt("id_livro"),
                    rs.getDate("data_locacao"),
                    rs.getDate("prazo_devolucao"),
                    rs.getInt("quantidade")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}

// Método para buscar o ID do cliente baseado no CPF
private int buscarIdClientePorCPF(String cpf) {
    int idCliente = -1;  // Retorna -1 caso não encontre o cliente
    Connection con = Conexao.conexaoBanco();
    if (con != null) {
        String query = "SELECT id_cliente FROM cliente WHERE cpf = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, cpf);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    idCliente = rs.getInt("id_cliente");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    return idCliente;
}

// Método para buscar o ID do livro baseado no ISBN
private int buscarIdLivroPorISBN(String isbn) {
    int idLivro = -1;  // Retorna -1 caso não encontre o livro
    Connection con = Conexao.conexaoBanco();
    if (con != null) {
        String query = "SELECT id_livro FROM livro WHERE isbn = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, isbn);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    idLivro = rs.getInt("id_livro");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    return idLivro;
}

private void setupListeners() {
    // Preencher a data de locação automaticamente com a data atual
    LocalDate hoje = LocalDate.now();
    txtDataLocacaoEmprestimo.setText(hoje.toString()); // Formato yyyy-MM-dd (por exemplo, 2024-11-18)

    // Adicionar Listener no campo de prazo para calcular a data de devolução
    txtPrazoDevolucaoEmprestimo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            calcularDataDevolucao();  // Chama a função para calcular a data de devolução
        }
    });

    // Adicionar Listener no campo Data de Locação para garantir que o foco seja tratado corretamente
    txtDataLocacaoEmprestimo.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {
            preencherDataLocacao();  // Chama a função para preencher a data de locação
        }
    });
}

private void preencherDataLocacao() {
    LocalDate hoje = LocalDate.now();
    txtDataLocacaoEmprestimo.setText(hoje.toString()); // Atualiza com a data de hoje
}

private void calcularDataDevolucao() {
    try {
        // Obter o prazo de devolução (em dias)
        int prazo = Integer.parseInt(txtPrazoDevolucaoEmprestimo.getText().trim());

        if (prazo <= 0) {
            JOptionPane.showMessageDialog(null, "O prazo de devolução deve ser maior que zero.");
            return;
        }

        // Obter a data de locação
        LocalDate dataLocacao = LocalDate.parse(txtDataLocacaoEmprestimo.getText().trim());

        // Calcular a data de devolução
        LocalDate dataDevolucao = dataLocacao.plusDays(prazo);

        // Preencher a data de devolução no campo correspondente
        txtDataDevolucaoEmprestimo.setText(dataDevolucao.toString()); // Formato yyyy-MM-dd
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "O prazo de devolução deve ser um número válido.");
    } catch (DateTimeParseException e) {
        JOptionPane.showMessageDialog(null, "Formato de data de locação inválido.");
    }
}



    private void btnConfirmarLocaçãoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarLocaçãoActionPerformed
        String cpfCliente = txtCPFEmprestimo.getText();
    String isbnLivro = txtISBNEmprestimo.getText();

    // Buscar ID do Cliente e do Livro
    int idCliente = buscarIdClientePorCPF(cpfCliente);
    int idLivro = buscarIdLivroPorISBN(isbnLivro);

    // Verificação de existência do cliente e do livro
    if (idCliente == -1 || idLivro == -1) {
        JOptionPane.showMessageDialog(null, "Erro: Cliente ou Livro não encontrado.");
        return;
    }

    try {
        int quantidade = Integer.parseInt(txtQuantidadeLocacaoEmprestimo.getText());
        int prazoDevolucaoDias = Integer.parseInt(txtPrazoDevolucaoEmprestimo.getText());

        if (quantidade <= 0 || prazoDevolucaoDias <= 0) {
            JOptionPane.showMessageDialog(null, "Quantidade e prazo devem ser maiores que zero.");
            return;
        }

        // Definir a data de locação como a data atual
        LocalDate dataLocacao = LocalDate.now();
        LocalDate dataDevolucao = dataLocacao.plusDays(prazoDevolucaoDias);

        // Converter as datas para String
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String dataLocacaoStr = dataLocacao.format(formatter);
        String dataDevolucaoStr = dataDevolucao.format(formatter);

        // Inserir no banco de dados
        Connection con = Conexao.conexaoBanco();

        if (con != null) {
            String query = "INSERT INTO locacao (id_cliente, id_livro, id_login, data_locacao, prazo_devolucao, quantidade) "
                         + "VALUES (?, ?, ?, ?, ?, ?)";

            try (PreparedStatement stmt = con.prepareStatement(query)) {
                stmt.setInt(1, idCliente);
                stmt.setInt(2, idLivro);
                stmt.setInt(3, 1);  // ID do login (administrador)
                stmt.setString(4, dataLocacaoStr);
                stmt.setString(5, dataDevolucaoStr);
                stmt.setInt(6, quantidade);

                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Locação confirmada com sucesso!");
                    listarLocacoes();  // Atualizar a tabela de locações
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao confirmar locação.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao tentar realizar a locação.");
            } finally {
                try {
                    if (con != null && !con.isClosed()) {
                        con.close();
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Erro: Não foi possível estabelecer a conexão com o banco.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Informe um número válido para quantidade e prazo.");
    }
        
    }//GEN-LAST:event_btnConfirmarLocaçãoActionPerformed

    private void btnListarInformacoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarInformacoesActionPerformed
        String cpf = txtCPFEmprestimo.getText().trim();
    String isbn = txtISBNEmprestimo.getText().trim();

    // Verifica se o CPF não está vazio
    if (!cpf.isEmpty()) {
        String nomeCliente = buscarNomeClientePorCPF(cpf);
        if (!nomeCliente.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Cliente encontrado: " + nomeCliente,
                                          "Informações do Cliente", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Cliente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    // Verifica se o ISBN não está vazio
    else if (!isbn.isEmpty()) {
        String nomeLivro = buscarNomeLivroPorISBN(isbn);
        if (!nomeLivro.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Livro encontrado: " + nomeLivro,
                                          "Informações do Livro", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Livro não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }
    else {
        JOptionPane.showMessageDialog(this, "Por favor, informe um CPF ou ISBN!", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnListarInformacoesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmarLocação;
    private javax.swing.JButton btnListarInformacoes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tbEmprestimo;
    private javax.swing.JTextField txtCPFEmprestimo;
    private javax.swing.JTextField txtDataDevolucaoEmprestimo;
    private javax.swing.JTextField txtDataLocacaoEmprestimo;
    private javax.swing.JTextField txtISBNEmprestimo;
    private javax.swing.JTextField txtNomeClienteEmprestimo;
    private javax.swing.JTextField txtNomeLivroEmprestimo;
    private javax.swing.JTextField txtPrazoDevolucaoEmprestimo;
    private javax.swing.JTextField txtQuantidadeLocacaoEmprestimo;
    // End of variables declaration//GEN-END:variables
}
